/**
 * Package:	Configuration of heartbeat
 * Authors:	Martin Lazar <mlazar@suse.cz>
 *
 * $Id$
 */

{
textdomain "heartbeat";

import "Label";
import "Wizard";
import "Heartbeat";
import "Report";
import "SCR";
import "NetworkInterfaces";

include "heartbeat/helps.ycp";
include "heartbeat/common.ycp";

string thisnode = "";
string thisnodeip = "";
string othernode = "";

void node_conf_Read()
{
    list<string> nodes = Heartbeat::config["node"]:[];

    map unamemap = (map)SCR::Execute(.target.bash_output, "uname -n");
    thisnode = deletechars(unamemap["stdout"]:"", "\n");

    //read current settings for network
    NetworkInterfaces::Read();

    //generate the map: static IP -> device
    list<string>devs=NetworkInterfaces::Locate("BOOTPROTO","static");
    foreach(string dev, devs,
    {
	string ip=NetworkInterfaces::GetValue(dev,"IPADDR");
	if(ip!=nil && ip != "")thisnodeip=ip;
    });

//     foreach(string s, nodes, { if (s != thisnode) othernode = s; });
}

boolean node_conf_Write()
{

    string newnode = (string)UI::QueryWidget(`id("othernode"), `Value);
//     if (newnode == nil || newnode == "") {
// 	Report::Error(_("The other node name is required."));
// 	return false;
//     }
//     if (newnode == thisnode) {
// 	Report::Error(_("The other node name cannot be same as this node name."));
// 	return false;
//     }
    
//     list<string> onodes = Heartbeat::config["node"]:[];
//     if (size(onodes) != 2 || onodes[0]:"" != thisnode || onodes[1]:"" != newnode) {
// 	Heartbeat::config["node"] = nodes;
// 	Heartbeat::config["modified"] = true;
//     }
    
    return true;
}
    
term node_conf_getDialog()
{
   return `VBox(
            `HBox(
	        `HWeight( 9,
	          `Frame(_("This Node"),
		      `HBox(
		          `Label(thisnode),
// 		          `HStretch(),
		          `Label("("),
		          `Label(thisnodeip),
		          `Label(")")
                      )
                   )
                )
            ),
	    `VSquash(
            `HBox(
                `HWeight( 9,
                    `Frame(_("Add Nodes"),
                        `HBox(
		            `Left(`InputField(`id("othernode"), `opt(`hstretch), _("Node Name"), othernode))
                        )
                    )
                ),
                `HWeight( 2,
                    `VBox(
                        `VSpacing(1),
                        `VSquash(
                            `PushButton(`id("add_node"), Label::AddButton())),
			`VSpacing(0.5),
			`VSquash(
			    `PushButton(`id("edit_node"), Label::EditButton())),
                        `VStretch()
                    )
                )
            )),
	    `HBox(
		`HWeight( 9, 
		    `Table(`id("node_table"), `opt(`notify, `immediate),
			`header(_("Node Name")))
		),
		`HWeight( 2,
		    `VBox(
			`VSpacing(1),
			`VSquash(
			    `PushButton(`id("delete_node"), Label::DeleteButton())),
			`VStretch()
		    )
		)
	    )
        );
}

any ConfigureNodeDialog () {

    node_conf_Read();
    
    my_SetContents("node_conf", node_conf_getDialog());

    list<string> nodes = Heartbeat::config["node"]:[];
    nodes = filter(string s, (list<string>)nodes, { return s != thisnode; });
    boolean modified = false;

    any ret = nil;
    string curnode = nil;
    while(true) {
    
 	list inodes = maplist(string s, (list<string>)nodes, {
 	    return `item(`id(s), s);
 	});
	UI::ChangeWidget(`id("node_table"), `Items, inodes);
	if (curnode != nil && !contains(nodes, curnode)) curnode = nil;
	if (curnode != nil) {
	    UI::ChangeWidget(`id("node_table"), `CurrentItem, curnode);
	}
	
	UI::ChangeWidget(`id("delete_node"), `Enabled, size(inodes)>0);
	UI::ChangeWidget(`id("edit_node"), `Enabled, size(inodes)>0);
	
	Wizard::SelectTreeItem("node_conf");

	string selnode = (string)UI::QueryWidget(`id("node_table"), `CurrentItem);
	if (selnode != nil) {
	    UI::ChangeWidget(`id("othernode"), `Value, selnode);
	}

	ret = UI::UserInput();

        if (ret == `abort || ret == `cancel) {
	    if (ReallyAbort()) return ret;
	    else continue;
	}

	if (ret == `help) {
	    myHelp("node_conf");
	    continue;
	}

	curnode = (string)UI::QueryWidget(`id("node_table"), `CurrentItem);
	
	if (ret == "node_table") {
	    if (curnode != nil) {
		UI::ChangeWidget(`id("othernode"), `Value, curnode);
	    }
	    continue;
	}
	
	if (ret == "delete_node") {
	    if (curnode != nil) {
		nodes = filter(string s, (list<string>)nodes, { return s != curnode; });
	    }
	    modified = true;
	    continue;
	}
	
	if (ret == "add_node" || ret == "edit_node") {
	    string nodename = (string)UI::QueryWidget(`id("othernode"), `Value);
	    if (nodename == "") {
	        Report::Error(_("Specify the node name."));
	        continue;
	    }
	    if (nodename == thisnode) {
	        Report::Error(_("The specified node is already in the cluster."));
	        continue;
	    }
	    string new = nodename;
	    if (ret == "edit_node") {
	        nodes = filter(string s, (list<string>)nodes, { return s != curnode; });
	    } else if (contains(nodes, new)) {
	        Report::Error(_("The specified node is already in the cluster."));
	        continue;
	    }
	    modified = true;
	    if (ret == "edit_node") {
	        nodes = filter(string s, (list<string>)nodes, { return s != curnode; });
	    }
	    curnode = new;
	    nodes = add(nodes, curnode);
	    continue;
	}

	if (ret == `wizardTree)
	    ret = (string)UI::QueryWidget (`id (`wizardTree), `CurrentItem);

	if (ret == `next || ret == `back || contains(DIALOG, (string)ret)) {
	
// 	    if (!node_conf_Write()) continue;
	    
	    if (ret != `next && ret != `back)
		ret = symbolof(toterm(ret));

	    break;
	}

	y2error("unexpected retcode: %1", ret);
    }

    if (modified) {
	nodes = add(nodes, thisnode);
	Heartbeat::config["node"] = nodes;
	Heartbeat::config["modified"] = true;
    }

    return ret;
}

/* EOF */
}
