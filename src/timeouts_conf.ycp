/**
 * Package:	Configuration of heartbeat
 * Authors:	Martin Lazar <mlazar@suse.cz>
 *
 * $Id$
 */

{
textdomain "heartbeat";

import "Label";
import "Wizard";
import "Heartbeat";
import "Report";
import "SCR";

include "heartbeat/helps.ycp";
include "heartbeat/common.ycp";

map timeouts_conf_Read()
{
    map to = $[];
    
    foreach(string key, ["keepalive", "deadtime", "warntime", "initdead"], {
        string x = Heartbeat::config[key]:"";
	if (x != "" && x != nil ) 
	    to[key] = tointeger(x);
    });

    to["watchdog"] = Heartbeat::config["watchdog"]:"";
    to["wd_enab"] = to["watchdog"]:"" != "";
    return to;
}

map timeouts_conf_Current(map old_to)
{
    map to = $[];

    foreach(string key, ["keepalive", "deadtime", "warntime", "initdead"], {
	to[key] = (integer)UI::QueryWidget(`id(key), `Value);
    });
    
    string wd_enab = (string)UI::QueryWidget(`id("wd_enab"), `CurrentButton);
    string wd_dev = (string)UI::QueryWidget(`id("wd_dev"), `Value);
    if (wd_enab == "disable") {
	to["watchdog"] = "";
	to["wd_enab"] = false;
    } else {
	to["watchdog"] = wd_dev;
	to["wd_enab"] = true;
    }
    
    return to;
}

boolean timeouts_conf_Write(map old, map new)
{
    foreach(string key, ["keepalive", "deadtime", "warntime", "initdead"], {
	if (old[key]:-1 != new[key]:-1) {
	    Heartbeat::config[key] = tostring(new[key]:-1);
	    Heartbeat::config["modified"] = true;
	}
    });
    
    if (old["watchdog"]:"" != new["watchdog"]:"") {
	Heartbeat::config["modified"] = true;
	if (new["watchdog"]:"" == "") {
	    Heartbeat::config = filter(string k, any v, 
		(map<string,any>)Heartbeat::config, { return (k != "watchdog"); });
	} else {
	    Heartbeat::config["watchdog"] = new["watchdog"]:"";
	}
    }
    
    return true;
}
    
term timeouts_conf_SetContents(map to)
{
    string watchdog = to["watchdog"]:"";
    list watchdogs = union([watchdog], ["/dev/watchdog"]);
    watchdogs = filter(string s, (list<string>)watchdogs, {return (s != "");});
    
    term contents = `VBox(
	`Left(`HSquash(`VBox(
	    `IntField(`id("keepalive"), _("Keep Alive"), 1, 1000, to["keepalive"]:2),
	    `VSpacing(1),
	    `IntField(`id("deadtime"), _("Dead Time"), 1, 1000, to["deadtime"]:30),
	    `VSpacing(1),
	    `IntField(`id("warntime"), _("Warn Time"), 1, 1000, to["warntime"]:10),
	    `VSpacing(1),
	    `IntField(`id("initdead"), _("Init Dead Time"), 1, 1000, to["initdead"]:120)))),
	`VSpacing(1),
	`Frame(_("Watchdog Timer"), `HBox(
	    `RadioButtonGroup(`id("wd_enab"), `VBox(
		`RadioButton(`id("enable"), `opt(`notify), _("Enable"), to["wd_enab"]:true),
		`RadioButton(`id("disable"), `opt(`notify), _("Disable"), !(to["wd_enab"]:true)))),
	    `HStretch(),
	    `ComboBox(`id("wd_dev"), `opt(`editable), _("Watchdog Device"), watchdogs ),
	    `HStretch())),
	`VStretch());

    my_SetContents("timeouts_conf", contents);
    UI::ChangeWidget(`id("wd_dev"), `Value, watchdog == "" ? "/dev/watchdog" : watchdog);
}

any timeouts_conf_UpdateDialog(map to)
{
    UI::ChangeWidget(`id("wd_dev"), `Enabled, to["wd_enab"]:true);
}

any ConfigureTimeoutsDialog () {

    map old = timeouts_conf_Read();
    map cur = old;
    
    timeouts_conf_SetContents(old);
    
    any ret = nil;
    while(true) {
    
	Wizard::SelectTreeItem("timeouts_conf");
	
	timeouts_conf_UpdateDialog(cur);

	ret = UI::UserInput();

	cur = timeouts_conf_Current(cur);
	
	if (ret == "enable" || ret == "disable") {
	    continue;
	}

	if (ret == `help) {
	    myHelp("timeouts_conf");
	    continue;
	}
	
        if (ret == `abort || ret == `cancel) {
	    if (ReallyAbort()) return ret;
	    else continue;
	}

	if (ret == `next || ret == `back || ret == `wizardTree || contains(DIALOG, tostring(ret))) {
	
	    if (!timeouts_conf_Write(old, cur)) continue;
	    
	    if (ret == `wizardTree)
	        ret = (string)UI::QueryWidget (`id (`wizardTree), `CurrentItem);
		
	    if (ret != `next && ret != `back)
		ret = symbolof(toterm(ret));

	    break;
	}

	y2error("unexpected retcode: %1", ret);
    }

    return ret;
}

/* EOF */
}
